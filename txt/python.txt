                                                         python
1.定义变量的方式格式： 变量名 = 值 即可
               与C语言的不同是 不用定义数据类型 直接变量名 = 值即可 且也不需要加分号
2.python输出与C语言的不同 1.不需要分号，输入的格式也有所不同
		格式： 1.print（变量名） 
			   2.print（"你想填写的信息%d、%c...." %变量名）or print（"你想填写的信息%d、%c...." %(变量名,变量名)）
     		   3.print（"各种信息%s" %（变量名，变量名.....）） %s可以代替%d %c %f......
       		   4.语法 f'{表达式}'  print（f’我的名字{my_name},年龄{age}’） 比较常用建议使用 但是只在python3.6以上的版本有效
					  print(f '我的名字是{my_name},今年{age}岁')
			    还有另外一种
				print（“变量名or其他方式”，end"各类信息"） python的print（“.....”）默认有end"\n" 也就是换行，但是我们可以改变这一规则
3.关于python的输入 与C语言的不同,python使用的是input()函数
		格式 1).input("......")
    		 2).若想输出需要这么做  变量名1=input(".....")  print(变量名1)即可
  			  注意:input("....")无论输入的是什么类型的东西,python都默认为字符串
			   例子：	input("请输入你想要的数字：")
						num = input("请输入你想要的数字")
						print(num)
 					   #验证输入的都是字符串 num是int类型的但是打印出来的是字符串 则验证成功
						print(type(num))
					   #转换数据类型(其实类似于C语言中的强制转换,其实一样)
						print(type(int(num)))#这段打印出来应该是int类型
					   #同理有 int(x),float(x),str(x) x表示想要转换的对象
					   #其中还有一些常用的如 eval（str）：用来计算字符串中的有效python表达式，并返回一个对象
					   #tuple(s):将序列s转换为一个元组
					   #list(s):将序列s这换为一个列表
			3).如果仅是为了为用户提供信息使用input足矣
			  但是如果想利用input和用户交互则会报错
			  例子: name = input("请输入你的名字")
			  		print("You name is %s"%name)
				*********************************************************************************
				结果:程序报错!   原因:input函数需要输入的是Python的表达式 键入关键字,数字不会报错
				*********************************************************************************
				若是想任意键入使用 raw_input()
			  例子: name = raw _input("请输入你的名字")
			  		print("You name is %s"%name)
			   ***************************
				任意键入不会报错
			   **************************

4.字符串：
	1）'' 单引号 "" 双引号 只能一行写不能分行 如果需要分行 可以使用"\"来进行分行
	2）'''  ''' 三引号    可以分行写
	例子：
		print('my name is') or print("my name is")
		print(''' my name is 
				   Troke ''')
5.关于python的运算符
  与C语言相比就多了一些,有一些不同
  在python中多了   **表示指数运算: 2**3=2*2*2, //表示整除(只取整数部分) 9//4=2
  在python中赋值也有不同 多个变量赋值时: num1,num2,str1 = 10,5.5,'我是谁'
  逻辑运算符就完全不同了 
  			1. and(布尔与/且)  [和C语言中的&&差不多]全真才真
            2. or(布尔或)  [和C语言中的||差不多]全假才假
            3. not(布尔非) [和C语言中的!(逻辑非)差不多]
数字之间的逻辑运算 
		    1.and运算符：如果比较的数字中只要有一个0 则返回0 否则返回最后一个非0数字
            2.or运算符：只有比较的数字中都为0 结果返回才为0 否则返回第一个非0数字
    #在python中 1<=a<=20 是可以合法表达的 跟数学上的形式差不多
6.python中if的用法
 if 条件：
    执行语句
    执行语句... 这里必须缩进4个单位或按Tab键 在这个软件里写代码不用缩进软件自动缩进
                注意怎么判断if的语句块？ 缩进的代码都是if里的语句块 当不再缩进时则不属于if里的语句块
7.多重if的使用  
				if 条件1：
                  执行语句
                elif 条件2：
                  执行语句
                else ：（不加条件判断时表示结束多重if）
					if的嵌套也是可以跟C语言中的差不多 只不过格式和刚刚的书写格式要一样
		            第一层缩进4第二层缩进8以此类推 缩进相当于C语言中打了{}把语句包起来
8.三目运算符： 条件执行表达式 if 条件 else 条件不成立执行的表达式
9.python中 只有while 和 for 循环
1) while的语法
		 while 条件 ：
    		 执行语句1
    		 执行语句2
 			#和if的用法差不多
2) for语法
 		for临时变量 in 序列：
   			 重复执行的代码
   			 重复执行的代码
   		例子：
			1.for i in range(100):
					print(i)
			  表示打印0-99的值
			2.for i in range(0,10,3):   
				表示从0开始，到10结束，步进值为3（即每次加3）
			3.for i in range(-10,-100,-30):
				也可以负向进行for循环
			4.name = "print"
			  for x in name:
			 表示会对字符串print进行遍历
			  ******************
			   结果：p,r,i,n,t
			  ******************
			5.a = ["aa","bb","cc","dd"]
			 for i in range(len(a)):
					 print(i,a[i])
			表示会遍历整个列表a
			 
10.新的语法“切片”
		切片：是指对操作对象截取其中一部分的操作。字符串、列表、元组都支持切片操作
		语法： 序列[开始位置下标:结束位置下标:步长]
		注意: 1.不包含结束位置下标对应的数据,正负整数均可;2.步长是选取间隔,正负数均可,默认步长为1
				步长就是下标加多少的标准
11.字符串的常用操作方法：查找、修改、判断
一.查找：查找子串在字符串中的位置或出现的次数
  	  	1.find(): 检测某个子串是否包含在这个字符串中.如果在,返回这个子串开始的位置下标否则则返回-1
      语法:  字符串序列.find(子串,开始位置下标,结束位置下标) 开始和结束位置下标可以省略,表示在整个字符串序列中查找
    	2.index():检测某个子串是否包含在这个字符串追中.如果在,返回这个子串开始的位置下标,否则则报异常
      语法:  字符串序列.index(子串,开始位置下标,结束位置下标) 开始和结束位置下标可以省略,表示在整个字符串序列中查找
    	3.count():返回某个子串在字符串中出现的次数
      语法:  字符串序列.count(子串,开始位置下标,结束位置下标) 开始和结束位置下标可以省略,表示在整个字符串序列中查找

二.字符串的修改
	 1.replace():替换
   语法：字符串序列.replace(旧子串，新子串，替换次数) 替换次数如果查出子串出现次数，则替换次数为该子串出现次数
	 2.split():按照指定字符分割字符串
   语法：字符串序列.split(分割字符，num) num表示的是分割字符出现的次数，即将来返回数据个数为num+1个
	 3.join():用一个字符或子串合并字符串，即使将多个字符串合并为一个新的字符串
   语法：字符或子串.join(多字符串组成的序列)
例子：
		mystr='hello world and itcast and itheima and Python'
		#replace
		new_str=mystr.replace('and','he',)#replace不会修改原字符串的内容但会有返回值，即需要用新的变量去接收修改后的内容
		new_str1=mystr.replace('and','he',1)#修改了一个and
		print(new_str)
		print(new_str1)
		#split 会返回一个列表，丢失分割字符
		list1=mystr.split('and') #不写num默认指全部 and在字符串里有3个分割完就有4个
		print(list1)
		list2=mystr.split('and',2)# num=2 所以最后出现的列表中的字符有3个
		print(list2)
		#join 合并列表里面的字符串数据为一个大的字符串
		mylist =['aa','bb','cc']
		list3 ='...'.join(mylist) #join前的是连接符
		print(list3)
		list4 ='dfdf'.join(mylist)
		print(list4)
11.列表：可以一次性存储多个数据，且可以为不同数据类型（类似于C语言中的结构体）
		格式 变量名 = [数据1，数据2，数据3......]
	列表查找的函数：1.index() 2.count() 3.len() 前面两个和在字符串的用法一样
	len（）：访问列表长度，即列表中数据的个数
	列表中判断是否存在的函数
	 1. in:判断指定数据在某个列表序列，如果在返回True，否则返回False
	 2. not in ：判断指定数据不在某个列表序列，如果不在返回True，否则返回False
	 语法 ： '判断的数据' in/not in 序列名
